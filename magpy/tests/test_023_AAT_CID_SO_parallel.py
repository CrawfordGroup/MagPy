import psi4
import magpy
import pytest
from ..data.molecules import *
import numpy as np
import os
from ..utils import make_np_array

np.set_printoptions(precision=15, linewidth=200, threshold=200, suppress=True)

def test_AAT_CID_H2DIMER():
    psi4.core.clean_options()
    psi4.set_memory('2 GB')
    psi4.set_output_file('output.dat', False)
    psi4.set_options({'scf_type': 'pk',
                      'e_convergence': 1e-13,
                      'd_convergence': 1e-13,
                      'r_convergence': 1e-13})

    psi4.set_options({'basis': 'STO-6G'})
    mol = psi4.geometry(moldict["(H2)_2"])
    rhf_e, rhf_wfn = psi4.energy('SCF', return_wfn=True)
    print(f"  SCF Energy from Psi4: {rhf_e}")

    AAT = magpy.AAT(mol, 0, 1)

    r_disp = 0.0001
    b_disp = 0.0001
    e_conv = 1e-13
    r_conv = 1e-13
    num_proc = os.cpu_count()
    I_00, I_0D, I_D0, I_DD = AAT.compute('CID', r_disp, b_disp, e_conv=e_conv, r_conv=r_conv, normalization='intermediate', orbitals='spin', parallel=True,
                                         num_proc=num_proc)
    print("\nElectronic Contribution to Atomic Axial Tensor (a.u.):")
    print("Hartree-Fock component:")
    print(I_00)
    print("<0|D> Component\n")
    print(I_0D)
    print("<D|0> Component\n")
    print(I_D0)
    print("<0|D>+<D|0>\n")
    print(I_0D+I_D0)
    print("<D|D> Component\n")
    print(I_DD)

    I_00_ref = make_np_array("""
[[-0.097856900379267 -0.024464664955929  0.06923210655395 ]
 [ 0.024686227457246  0.005879922595279 -0.003819266076075]
 [-0.209265694502983 -0.051803561305989  0.093935959571669]
 [-0.088710310622527 -0.022263494741675  0.060278744164669]
 [-0.016456264699243 -0.004056816515349  0.020292183724675]
 [-0.215140025586322 -0.053171431393181  0.089029423759699]
 [-0.088710310630709 -0.022263494743629 -0.060278744175718]
 [-0.016456264688766 -0.004056816512675 -0.020292183730881]
 [ 0.215140025581244  0.053171431391934  0.089029423752232]
 [-0.097856900442317 -0.024464664971436 -0.069232106526598]
 [ 0.024686227479546  0.005879922601014  0.003819266091157]
 [ 0.209265694494609  0.05180356130386   0.093935959561269]]
 """)

    I_0D_ref = make_np_array("""
[[ 0.011424906174176  0.00284279020091  -0.007657421068027]
 [-0.001518637652337 -0.00037607040392  -0.000158476957254]
 [ 0.022030689055581  0.005478587577683 -0.012024128553204]
 [ 0.010756711930063  0.002677055982711 -0.007165839091218]
 [ 0.001653378746906  0.000411045954502 -0.000847771162833]
 [ 0.022245707233434  0.005531466675376 -0.011844514710824]
 [ 0.010756711931167  0.002677055982973  0.007165839092493]
 [ 0.001653378745958  0.000411045954255  0.00084777116338 ]
 [-0.022245707232918 -0.005531466675226 -0.011844514709802]
 [ 0.011424906180991  0.002842790202584  0.007657421064533]
 [-0.001518637654643 -0.000376070404534  0.00015847695525 ]
 [-0.022030689054449 -0.005478587577412 -0.012024128552076]]
 """)

    I_D0_ref = make_np_array("""
[[-0.011424906361104 -0.002842790219884  0.007657421111043]
 [ 0.001518637672543  0.000376070404646  0.000158476956634]
 [-0.022030689406287 -0.005478587615383  0.012024128645684]
 [-0.010756712106327 -0.002677056005323  0.007165839136035]
 [-0.00165337876797  -0.000411045958558  0.000847771170003]
 [-0.022245707576422 -0.005531466713657  0.011844514802773]
 [-0.010756712108056 -0.002677056005755 -0.007165839137041]
 [-0.001653378767336 -0.000411045958402 -0.000847771170318]
 [ 0.022245707576832  0.005531466713759  0.011844514803097]
 [-0.011424906367372 -0.002842790221441 -0.007657421106823]
 [ 0.001518637675001  0.000376070405261 -0.000158476955133]
 [ 0.022030689404459  0.005478587614932  0.012024128644922]]
 """)

    I_DD_ref = make_np_array("""
[[ 0.000124891106513  0.000087456328189 -0.000161939000276]
 [-0.00008369903897  -0.000020174481159 -0.000020471011177]
 [ 0.000683239104114  0.000075313802282 -0.000172953608345]
 [ 0.00001423873044  -0.000032832367992  0.000091401848996]
 [ 0.000178358493551 -0.00004344393336   0.000006134045722]
 [ 0.000156210348074  0.000172437039597  0.000118608684893]
 [ 0.000014238749811 -0.000032832367697 -0.000091401848852]
 [ 0.000178358494032 -0.000043443936217 -0.000006134045661]
 [-0.000156210378479 -0.000172437041579  0.000118608684902]
 [ 0.000124891089301  0.000087456327671  0.000161938999836]
 [-0.000083699043171 -0.000020174480659  0.00002047101123 ]
 [-0.000683239073748 -0.00007531380032  -0.00017295360844 ]]
 """)

    assert(np.max(np.abs(I_00_ref-I_00)) < 1e-9)
    assert(np.max(np.abs(I_0D_ref-I_0D)) < 1e-9)
    assert(np.max(np.abs(I_D0_ref-I_D0)) < 1e-9)
    assert(np.max(np.abs(I_DD_ref-I_DD)) < 1e-9)

def test_AAT_CID_H2DIMER_NORM():
    psi4.core.clean_options()
    psi4.set_memory('2 GB')
    psi4.set_output_file('output.dat', False)
    psi4.set_options({'scf_type': 'pk',
                      'e_convergence': 1e-13,
                      'd_convergence': 1e-13,
                      'r_convergence': 1e-13})

    psi4.set_options({'basis': 'STO-6G'})
    mol = psi4.geometry(moldict["(H2)_2"])
    rhf_e, rhf_wfn = psi4.energy('SCF', return_wfn=True)
    print(f"  SCF Energy from Psi4: {rhf_e}")

    AAT = magpy.AAT(mol, 0, 1)

    r_disp = 0.0001
    b_disp = 0.0001
    e_conv = 1e-13
    r_conv = 1e-13
    num_proc = os.cpu_count()
    I_00, I_0D, I_D0, I_DD = AAT.compute('CID', r_disp, b_disp, e_conv=e_conv, r_conv=r_conv, normalization='full', orbitals='spin', parallel=True, num_proc=num_proc)
    print("\nElectronic Contribution to Atomic Axial Tensor (a.u.):")
    print("Hartree-Fock component:")
    print(I_00)
    print("<0|D> Component\n")
    print(I_0D)
    print("<D|0> Component\n")
    print(I_D0)
    print("<0|D>+<D|0>\n")
    print(I_0D+I_D0)
    print("<D|D> Component\n")
    print(I_DD)

    I_00_ref = make_np_array("""
[[-0.09513701717291  -0.023784681925721  0.067307835069183]
 [ 0.024000086211862  0.005716493110661 -0.003713111511762]
 [-0.203449260104919 -0.050363707449073  0.09132505695627 ]
 [-0.086244652286479 -0.021644692132782  0.058603326872811]
 [-0.015998871128165 -0.003944059347583  0.01972817270957 ]
 [-0.209160317098023 -0.051693558272251  0.086554895833264]
 [-0.08624465231163  -0.021644692138982 -0.058603326884424]
 [-0.015998871121655 -0.003944059345944 -0.019728172712171]
 [ 0.209160317113225  0.051693558276127  0.086554895820963]
 [-0.095137017212308 -0.023784681935333 -0.067307835065207]
 [ 0.024000086213199  0.005716493111224  0.003713111512817]
 [ 0.203449260102882  0.050363707448667  0.091325056947525]]
 """)

    I_0D_ref = make_np_array("""
[[ 0.011107356668396  0.002763776280464 -0.007444586911469]
 [-0.001476427884344 -0.000365617716593 -0.00015407216886 ]
 [ 0.021418357168675  0.00532631299945  -0.011689923965106]
 [ 0.010457734547885  0.002602648561722 -0.006966668207858]
 [ 0.001607423919157  0.000399621139614 -0.000824207790605]
 [ 0.02162739902239   0.005377722348694 -0.011515302398893]
 [ 0.010457734550992  0.002602648562475  0.006966668209321]
 [ 0.001607423918804  0.000399621139512  0.000824207790541]
 [-0.02162739902415  -0.005377722349145 -0.011515302397462]
 [ 0.01110735667196   0.002763776281365  0.007444586911305]
 [-0.001476427884461 -0.000365617716593  0.000154072168972]
 [-0.021418357168174 -0.005326312999309 -0.011689923963874]]
 """)

    I_D0_ref = make_np_array("""
[[-0.011107356848449 -0.002763776298499  0.007444586952933]
 [ 0.001476427904045  0.000365617717291  0.000154072168612]
 [-0.021418357503999 -0.005326313034694  0.011689924052147]
 [-0.010457734718616 -0.002602648583527  0.0069666682508  ]
 [-0.001607423940173 -0.000399621143692  0.000824207797632]
 [-0.021627399353107 -0.005377722385237  0.011515302485561]
 [-0.010457734720092 -0.002602648583895 -0.006966668251859]
 [-0.001607423939574 -0.000399621143549 -0.00082420779848 ]
 [ 0.021627399353798  0.005377722385406  0.011515302484935]
 [-0.011107356852376 -0.002763776299474 -0.007444586950971]
 [ 0.001476427905098  0.000365617717557 -0.000154072168121]
 [ 0.021418357503382  0.005326313034541  0.011689924051268]]
 """)

    I_DD_ref = make_np_array("""
[[ 0.00012141981371   0.000085025523518 -0.000154934043171]
 [-0.00008137266825  -0.000019613741413 -0.000019434710879]
 [ 0.000664248804108  0.000073220492216 -0.000163554347185]
 [ 0.000013842980189 -0.000031919808921  0.000086123777585]
 [ 0.000173401108829 -0.000042236432859  0.00000619635474 ]
 [ 0.000151868572951  0.000167644239681  0.000110719913945]
 [ 0.000013842979618 -0.000031919810028 -0.000086123777912]
 [ 0.000173401110031 -0.000042236432248 -0.000006196354662]
 [-0.000151868570934 -0.000167644237522  0.000110719913684]
 [ 0.000121419814438  0.000085025524589  0.000154934043438]
 [-0.000081372668693 -0.00001961374137   0.000019434711171]
 [-0.000664248806083 -0.000073220494365 -0.000163554347132]]
 """)

    assert(np.max(np.abs(I_00_ref-I_00)) < 1e-9)
    assert(np.max(np.abs(I_0D_ref-I_0D)) < 1e-9)
    assert(np.max(np.abs(I_D0_ref-I_D0)) < 1e-9)
    assert(np.max(np.abs(I_DD_ref-I_DD)) < 1e-9)

@pytest.mark.skip(reason="too long")
def test_AAT_CID_H2O():
    psi4.core.clean_options()
    psi4.set_memory('2 GB')
    psi4.set_output_file('output.dat', False)
    psi4.set_options({'scf_type': 'pk',
                      'e_convergence': 1e-12,
                      'd_convergence': 1e-12,
                      'r_convergence': 1e-12})

    psi4.set_options({'basis': 'STO-6G'})
    mol = psi4.geometry(moldict["H2O"])
    rhf_e, rhf_wfn = psi4.energy('SCF', return_wfn=True)
    print(f"  SCF Energy from Psi4: {rhf_e}")

    AAT = magpy.AAT(mol)

    r_disp = 0.0001
    b_disp = 0.0001
    e_conv = 1e-13
    r_conv = 1e-13
    num_proc = os.cpu_count()
    I_00, I_0D, I_D0, I_DD = AAT.compute('CID', r_disp, b_disp, e_conv=e_conv, r_conv=r_conv, normalization='intermediate', orbitals='spin', parallel=True,
                                         num_proc=num_proc)

    print("Hartree-Fock component:")
    print(I_00)
    print("<0|D> Component\n")
    print(I_0D)
    print("<D|0> Component\n")
    print(I_D0)
    print("<0|D>+<D|0>\n")
    print(I_0D+I_D0)
    print("<D|D> Component\n")
    print(I_DD)

    I_00_ref = make_np_array("""
[[ 0.000000000000426 -0.000000000000611 -0.226306484071215]
 [-0.000000000000246 -0.000000000003348 -0.000000000000264]
 [ 0.329611190316108  0.000000000000682 -0.000000000000009]
 [ 0.000000000001468 -0.000000000001866  0.05989549671303 ]
 [ 0.000000000000381 -0.00000000000156  -0.136503781613871]
 [-0.229202569425135  0.215872630803924 -0.00000000000047 ]
 [ 0.000000000001349 -0.000000000000574  0.059895496711243]
 [ 0.000000000001972  0.00000000000114   0.136503781609341]
 [-0.229202569426253 -0.215872630804395  0.000000000000478]]
 """)

    I_0D_ref = make_np_array("""
[[-0.000000000000011  0.000000000000007  0.009719122239403]
 [-0.000000000000104  0.000000000000041  0.000000000000118]
 [-0.008593312034335 -0.000000000000008  0.               ]
 [-0.000000000000122  0.000000000000023  0.001199562663005]
 [-0.000000000000097  0.000000000000019  0.004193092491438]
 [ 0.005975552929336 -0.002639002775107  0.000000000000007]
 [ 0.000000000000049  0.000000000000007  0.001199562663051]
 [-0.000000000000139 -0.000000000000014 -0.004193092491388]
 [ 0.005975552929385  0.002639002775111 -0.000000000000007]]
 """)

    I_D0_ref = make_np_array("""
[[ 0.000000000000019 -0.000000000000009 -0.009719121979421]
 [ 0.000000000000158 -0.000000000000005 -0.000000000000214]
 [ 0.008593312030698  0.000000000000017  0.               ]
 [ 0.000000000000137 -0.000000000000024 -0.001199562713714]
 [ 0.000000000000097 -0.000000000000005 -0.004193092483184]
 [-0.005975553612536  0.002639003322572 -0.000000000000008]
 [-0.00000000000006  -0.000000000000008 -0.001199562713671]
 [ 0.000000000000059  0.000000000000012  0.004193092483093]
 [-0.005975553612584 -0.002639003322548  0.000000000000008]]
 """)

    I_DD_ref = make_np_array("""
[[ 0.000000000000056 -0.000000000000025 -0.006571145180565]
 [ 0.000000000000689 -0.000000000000082  0.000000000000335]
 [ 0.036050121272893 -0.000000000000079 -0.               ]
 [-0.000000000000248 -0.00000000000013   0.001267365504239]
 [-0.000000000000314 -0.000000000000045 -0.009999089093889]
 [-0.020642645988421  0.016765832726509 -0.000000000000047]
 [ 0.000000000000467 -0.000000000000057  0.001267365504637]
 [-0.000000000000371  0.000000000000088  0.009999089093353]
 [-0.020642645988492 -0.016765832726487  0.000000000000047]]
 """)

    assert(np.max(np.abs(I_00_ref-I_00)) < 1e-9)
    assert(np.max(np.abs(I_0D_ref-I_0D)) < 1e-9)
    assert(np.max(np.abs(I_D0_ref-I_D0)) < 1e-9)
    assert(np.max(np.abs(I_DD_ref-I_DD)) < 1e-9)

@pytest.mark.skip(reason="too long")
def test_AAT_CID_H2O_NORM():
    psi4.core.clean_options()
    psi4.set_memory('2 GB')
    psi4.set_output_file('output.dat', False)
    psi4.set_options({'scf_type': 'pk',
                      'e_convergence': 1e-12,
                      'd_convergence': 1e-12,
                      'r_convergence': 1e-12})

    psi4.set_options({'basis': 'STO-6G'})
    mol = psi4.geometry(moldict["H2O"])
    rhf_e, rhf_wfn = psi4.energy('SCF', return_wfn=True)
    print(f"  SCF Energy from Psi4: {rhf_e}")

    AAT = magpy.AAT(mol)

    r_disp = 0.0001
    b_disp = 0.0001
    e_conv = 1e-13
    r_conv = 1e-13
    num_proc = os.cpu_count()
    I_00, I_0D, I_D0, I_DD = AAT.compute('CID', r_disp, b_disp, e_conv=e_conv, r_conv=r_conv, normalization='full', orbitals='spin', parallel=True, num_proc=num_proc)
    print("Hartree-Fock component:")
    print(I_00)
    print("<0|D> Component\n")
    print(I_0D)
    print("<D|0> Component\n")
    print(I_D0)
    print("<0|D>+<D|0>\n")
    print(I_0D+I_D0)
    print("<D|D> Component\n")
    print(I_DD)

    I_00_ref = make_np_array("""
[[ 0.000000000001681 -0.000000000000066 -0.216369026352184]
 [ 0.000000000031349  0.000000000013539  0.000000000004924]
 [ 0.315137467648931 -0.000000000006571  0.000000000000019]
 [ 0.000000000001682 -0.00000000000047   0.057265395478773]
 [ 0.000000000001331  0.000000000000033 -0.130509695508135]
 [-0.21913794022654   0.206393339272046 -0.000000000000701]
 [-0.000000000000366 -0.000000000000273  0.057265395481647]
 [-0.000000000000126  0.00000000000079   0.130509695509671]
 [-0.219137940232017 -0.206393339277598 -0.000000000000611]]
 """)

    I_0D_ref = make_np_array("""
[[-0.000000000000044  0.000000000000001  0.009292340979379]
 [-0.000000000000829 -0.000000000000166  0.000000000001179]
 [-0.008215966789908  0.00000000000008   0.               ]
 [-0.000000000000053  0.000000000000006  0.001146888064831]
 [-0.000000000000045 -0.                 0.00400896750085 ]
 [ 0.005713157422038 -0.002523120198581  0.000000000000005]
 [ 0.000000000000019  0.000000000000003  0.001146888064285]
 [-0.000000000000007 -0.00000000000001  -0.004008967500919]
 [ 0.005713157422109  0.002523120198647 -0.000000000000005]]
 """)

    I_D0_ref = make_np_array("""
[[ 0.000000000000039 -0.000000000000023 -0.009292340730827]
 [ 0.00000000000088   0.00000000000017  -0.000000000001101]
 [ 0.00821596678659  -0.000000000000105 -0.               ]
 [ 0.00000000000001   0.000000000000015 -0.001146888112374]
 [ 0.000000000000005  0.000000000000022 -0.004008967492092]
 [-0.005713158075148  0.002523120721989 -0.000000000000004]
 [-0.000000000000055  0.000000000000019 -0.001146888111887]
 [-0.000000000000021 -0.000000000000001  0.004008967492141]
 [-0.005713158075265 -0.002523120722027  0.000000000000004]]
 """)

    I_DD_ref = make_np_array("""
[[ 0.000000000000072  0.000000000000007 -0.006282596322971]
 [ 0.000000000002559  0.00000000000097  -0.000000000000137]
 [ 0.034467106277752 -0.000000000000593  0.000000000000001]
 [ 0.00000000000004  -0.000000000000021  0.001211713581436]
 [ 0.000000000000008  0.00000000000004  -0.00956001407078 ]
 [-0.019736196388032  0.016029619821933 -0.000000000000033]
 [-0.000000000000054 -0.000000000000001  0.001211713581891]
 [-0.000000000000137  0.000000000000068  0.009560014070954]
 [-0.019736196388375 -0.016029619822273  0.000000000000003]]
 """)

    assert(np.max(np.abs(I_00_ref-I_00)) < 1e-9)
    assert(np.max(np.abs(I_0D_ref-I_0D)) < 1e-9)
    assert(np.max(np.abs(I_D0_ref-I_D0)) < 1e-9)
    assert(np.max(np.abs(I_DD_ref-I_DD)) < 1e-9)

