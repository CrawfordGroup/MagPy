import psi4
import magpy
import pytest
from ..data.molecules import *
import numpy as np
import os
from ..utils import make_np_array

np.set_printoptions(precision=15, linewidth=200, threshold=200, suppress=True)

def test_AAT_CID_H2DIMER():

    psi4.set_memory('2 GB')
    psi4.set_output_file('output.dat', False)
    psi4.set_options({'scf_type': 'pk',
                      'e_convergence': 1e-13,
                      'd_convergence': 1e-13,
                      'r_convergence': 1e-13})

    psi4.set_options({'basis': 'STO-6G'})
    mol = psi4.geometry(moldict["(H2)_2"])
    rhf_e, rhf_wfn = psi4.energy('SCF', return_wfn=True)
    print(f"  SCF Energy from Psi4: {rhf_e}")

    AAT = magpy.AAT_CI(mol, 0, 1, 1)

    r_disp = 0.0001
    b_disp = 0.0001
    e_conv = 1e-13
    r_conv = 1e-13
    I_00, I_0D, I_D0, I_DD = AAT.compute(r_disp, b_disp, e_conv, r_conv)
    print("\nElectronic Contribution to Atomic Axial Tensor (a.u.):")
    print("Hartree-Fock component:")
    print(I_00)
    print("<0|D> Component\n")
    print(I_0D)
    print("<D|0> Component\n")
    print(I_D0)
    print("<0|D>+<D|0>\n")
    print(I_0D+I_D0)
    print("<D|D> Component\n")
    print(I_DD)

    I_00_ref = make_np_array("""
[[-0.097856900379267 -0.024464664955929  0.06923210655395 ]
 [ 0.024686227457246  0.005879922595279 -0.003819266076075]
 [-0.209265694502983 -0.051803561305989  0.093935959571669]
 [-0.088710310622527 -0.022263494741675  0.060278744164669]
 [-0.016456264699243 -0.004056816515349  0.020292183724675]
 [-0.215140025586322 -0.053171431393181  0.089029423759699]
 [-0.088710310630709 -0.022263494743629 -0.060278744175718]
 [-0.016456264688766 -0.004056816512675 -0.020292183730881]
 [ 0.215140025581244  0.053171431391934  0.089029423752232]
 [-0.097856900442317 -0.024464664971436 -0.069232106526598]
 [ 0.024686227479546  0.005879922601014  0.003819266091157]
 [ 0.209265694494609  0.05180356130386   0.093935959561269]]
 """)

    I_0D_ref = make_np_array("""
[[ 0.011424906174177  0.00284279020091  -0.007657421068026]
 [-0.001518637652335 -0.000376070403919 -0.000158476957254]
 [ 0.02203068905558   0.005478587577683 -0.012024128553204]
 [ 0.010756711930064  0.002677055982712 -0.007165839091218]
 [ 0.001653378746906  0.000411045954502 -0.000847771162832]
 [ 0.022245707233432  0.005531466675376 -0.011844514710825]
 [ 0.010756711931168  0.002677055982973  0.007165839092493]
 [ 0.001653378745958  0.000411045954255  0.00084777116338 ]
 [-0.022245707232916 -0.005531466675226 -0.011844514709802]
 [ 0.011424906180991  0.002842790202585  0.007657421064533]
 [-0.001518637654642 -0.000376070404533  0.00015847695525 ]
 [-0.022030689054448 -0.005478587577412 -0.012024128552076]]
 """)

    I_D0_ref = make_np_array("""
[[-0.011424906361147 -0.002842790219895  0.007657421110989]
 [ 0.001518637672864  0.000376070404727  0.000158476956831]
 [-0.022030689406457 -0.005478587615423  0.012024128645762]
 [-0.010756712106509 -0.002677056005367  0.007165839135946]
 [-0.001653378767946 -0.000411045958553  0.000847771170082]
 [-0.022245707576547 -0.005531466713688  0.011844514802595]
 [-0.010756712108082 -0.002677056005761 -0.007165839137071]
 [-0.001653378767375 -0.000411045958414 -0.000847771170359]
 [ 0.022245707576755  0.005531466713741  0.011844514803213]
 [-0.011424906367428 -0.002842790221454 -0.007657421106882]
 [ 0.001518637675132  0.000376070405295 -0.000158476955021]
 [ 0.022030689404644  0.005478587614976  0.012024128644829]]
 """)

    I_DD_ref = make_np_array("""
[[ 0.000124891098594  0.000087456330243 -0.000161938991881]
 [-0.000083699041093 -0.000020174481238 -0.00002047100889 ]
 [ 0.000683239090548  0.000075313805923 -0.000172953594233]
 [ 0.000014238739415 -0.000032832369986  0.000091401840183]
 [ 0.000178358494448 -0.00004344393426   0.000006134046085]
 [ 0.000156210361677  0.000172437035864  0.000118608670786]
 [ 0.000014238741257 -0.000032832370465 -0.000091401840581]
 [ 0.000178358493172 -0.000043443935527 -0.000006134046342]
 [-0.000156210365643 -0.000172437036494  0.000118608670745]
 [ 0.000124891096811  0.000087456330444  0.000161938991762]
 [-0.000083699041111 -0.000020174480631  0.000020471010485]
 [-0.000683239086596 -0.00007531380531  -0.000172953595281]]
""")

    assert(np.max(np.abs(I_00_ref-I_00)) < 1e-10)
    assert(np.max(np.abs(I_0D_ref-I_0D)) < 1e-10)
    assert(np.max(np.abs(I_D0_ref-I_D0)) < 1e-10)
    assert(np.max(np.abs(I_DD_ref-I_DD)) < 1e-10)

def test_AAT_CID_H2O():

    psi4.set_memory('2 GB')
    psi4.set_output_file('output.dat', False)
    psi4.set_options({'scf_type': 'pk',
                      'e_convergence': 1e-12,
                      'd_convergence': 1e-12,
                      'r_convergence': 1e-12})

    psi4.set_options({'basis': 'STO-6G'})
    mol = psi4.geometry(moldict["H2O"])
    rhf_e, rhf_wfn = psi4.energy('SCF', return_wfn=True)
    print(f"  SCF Energy from Psi4: {rhf_e}")

    AAT = magpy.AAT_CI(mol, 0, 1, 1)

    r_disp = 0.0001
    b_disp = 0.0001
    e_conv = 1e-13
    r_conv = 1e-13
    I_00, I_0D, I_D0, I_DD = AAT.compute(r_disp, b_disp, e_conv, r_conv)
    print("\nElectronic Contribution to Atomic Axial Tensor (a.u.):")
    print("Hartree-Fock component:")
    print(I_00)
    print("<0|D> Component\n")
    print(I_0D)
    print("<D|0> Component\n")
    print(I_D0)
    print("<0|D>+<D|0>\n")
    print(I_0D+I_D0)
    print("<D|D> Component\n")
    print(I_DD)

    I_00_ref = make_np_array("""
[[ 0.000000000000615  0.000000000000288 -0.226306484070573]
 [-0.000000000001284  0.000000000002456  0.000000000009745]
 [ 0.329611190264759 -0.000000000003012 -0.               ]
 [ 0.000000000000584 -0.000000000000022  0.059895496710408]
 [ 0.000000000000922 -0.000000000000159 -0.136503781615856]
 [-0.229202569432311  0.215872630800364  0.000000000000086]
 [-0.000000000001647  0.000000000001087  0.05989549670396 ]
 [-0.000000000001775 -0.000000000000769  0.136503781614182]
 [-0.229202569423767 -0.21587263080386  -0.000000000000086]]
 """)

    I_0D_ref = make_np_array("""
[[-0.000000000000016 -0.000000000000004  0.009719122239378]
 [-0.000000000000004 -0.00000000000003  -0.000000000000007]
 [-0.008593312033004  0.000000000000037 -0.               ]
 [-0.000000000000046  0.                 0.001199562663158]
 [-0.000000000000058  0.000000000000002  0.00419309249157 ]
 [ 0.005975552929523 -0.002639002775059  0.000000000000004]
 [ 0.000000000000074 -0.000000000000013  0.001199562663249]
 [ 0.000000000000012  0.000000000000009 -0.004193092491498]
 [ 0.005975552929327  0.002639002775102 -0.000000000000004]]
 """)

    I_D0_ref = make_np_array("""
[[ 0.000000000000021 -0.000000000000008 -0.009719121979288]
 [ 0.000000000000077  0.000000000000041  0.000000000000138]
 [ 0.008593312029382 -0.000000000000037  0.               ]
 [ 0.000000000000065  0.000000000000007 -0.001199562713834]
 [ 0.000000000000082  0.000000000000018 -0.004193092483275]
 [-0.005975553612676  0.002639003322523 -0.000000000000003]
 [-0.000000000000075  0.00000000000001  -0.001199562713837]
 [ 0.000000000000094 -0.000000000000019  0.004193092483204]
 [-0.005975553612565 -0.002639003322554  0.000000000000003]]
 """)

    I_DD_ref = make_np_array("""
[[-0.                 0.00000000000005  -0.006571145180452]
 [-0.000000000000113  0.000000000000231  0.000000000000325]
 [ 0.036050121268829 -0.000000000000415  0.               ]
 [ 0.000000000000012 -0.000000000000017  0.001267365504146]
 [ 0.000000000000069  0.000000000000001 -0.009999089093936]
 [-0.020642645989297  0.016765832724568 -0.00000000000002 ]
 [ 0.000000000000011 -0.000000000000008  0.001267365503931]
 [-0.000000000000043 -0.000000000000052  0.009999089093942]
 [-0.020642645989002 -0.016765832724794  0.00000000000002 ]]
 """)

    assert(np.max(np.abs(I_00_ref-I_00)) < 1e-10)
    assert(np.max(np.abs(I_0D_ref-I_0D)) < 1e-10)
    assert(np.max(np.abs(I_D0_ref-I_D0)) < 1e-10)
    assert(np.max(np.abs(I_DD_ref-I_DD)) < 1e-10)
