import psi4
import magpy
import pytest
from ..data.molecules import *
import numpy as np
import os
from ..utils import make_np_array

np.set_printoptions(precision=15, linewidth=200, threshold=200, suppress=True)

def test_AAT_MP2_H2DIMER():
    psi4.core.clean_options()
    psi4.set_memory('2 GB')
    psi4.set_output_file('output.dat', False)
    psi4.set_options({'scf_type': 'pk',
                      'e_convergence': 1e-13,
                      'd_convergence': 1e-13,
                      'r_convergence': 1e-13})

    psi4.set_options({'basis': 'STO-6G'})
    mol = psi4.geometry(moldict["(H2)_2"])
    rhf_e, rhf_wfn = psi4.energy('SCF', return_wfn=True)
    print(f"  SCF Energy from Psi4: {rhf_e}")

    AAT = magpy.AAT(mol, 0, 1)

    r_disp = 0.0001
    b_disp = 0.0001
    e_conv = 1e-12
    r_conv = 1e-12
    I_00, I_0D, I_D0, I_DD = AAT.compute('MP2', r_disp, b_disp, e_conv=e_conv, r_conv=r_conv, normalization='intermediate', orbitals='spin')
    print("\nElectronic Contribution to Atomic Axial Tensor (a.u.):")
    print("Hartree-Fock component:")
    print(I_00)
    print("<0|D> Component\n")
    print(I_0D)
    print("<D|0> Component\n")
    print(I_D0)
    print("<0|D>+<D|0>\n")
    print(I_0D+I_D0)
    print("<D|D> Component\n")
    print(I_DD)

    I_00_ref = make_np_array("""
[[-0.097856900380588 -0.024464664956326  0.069232106555729]
 [ 0.024686227456083  0.005879922595203 -0.003819266090547]
 [-0.209265694524659 -0.05180356131117   0.093935959575227]
 [-0.088710310627261 -0.022263494742885  0.060278744165513]
 [-0.016456264694742 -0.004056816514239  0.020292183723543]
 [-0.21514002556918  -0.053171431388749  0.089029423725732]
 [-0.088710310626588 -0.022263494742679 -0.060278744177435]
 [-0.016456264691045 -0.004056816513592 -0.020292183725927]
 [ 0.215140025573511  0.053171431390266  0.089029423755952]
 [-0.097856900378438 -0.024464664955682 -0.069232106545824]
 [ 0.024686227448903  0.005879922593505  0.003819266084786]
 [ 0.209265694539803  0.051803561314421  0.093935959573392]]
 """)

    I_0D_ref = make_np_array("""
[[ 0.006808740806713  0.001695403965846 -0.005130119221723]
 [-0.000871959185039 -0.000215407613629 -0.000115195855874]
 [ 0.013071058394272  0.003251728203179 -0.008080999182386]
 [ 0.006420223679394  0.00159916397618  -0.004808528656242]
 [ 0.000978840784228  0.000243398583464 -0.000546272604492]
 [ 0.013187776614615  0.003280199758776 -0.007966306038704]
 [ 0.006420223679475  0.001599163976206  0.004808528657145]
 [ 0.0009788407842    0.000243398583456  0.000546272604669]
 [-0.013187776615364 -0.00328019975895  -0.007966306041222]
 [ 0.006808740806515  0.001695403965789  0.005130119221038]
 [-0.00087195918462  -0.000215407613532  0.000115195856182]
 [-0.013071058394739 -0.003251728203301 -0.008080999182139]]
 """)

    I_D0_ref = make_np_array("""
[[-0.006808740893065 -0.001695403973911  0.005130119233669]
 [ 0.000871959200279  0.000215407614868  0.000115195854288]
 [-0.013071058544269 -0.003251728216065  0.008080999226162]
 [-0.00642022376033  -0.001599163986162  0.004808528667938]
 [-0.000978840803245 -0.000243398587687  0.000546272606305]
 [-0.013187776762249 -0.003280199772091  0.007966306081314]
 [-0.006420223760953 -0.001599163986316 -0.004808528668646]
 [-0.000978840803529 -0.00024339858776  -0.000546272606367]
 [ 0.013187776763261  0.003280199772343  0.007966306084726]
 [-0.00680874089264  -0.001695403973803 -0.005130119232573]
 [ 0.000871959199863  0.000215407614764 -0.000115195854262]
 [ 0.013071058544463  0.003251728216117  0.008080999225845]]
 """)

    I_DD_ref = make_np_array("""
[[ 0.000030731202505  0.000025700510924 -0.000056151104286]
 [-0.000014926915538 -0.000001173748794 -0.00000556715242 ]
 [ 0.000200327181504  0.000027280454119 -0.000071478160385]
 [ 0.000006267830755 -0.000012114425734  0.000026462669116]
 [ 0.000055984628473 -0.000008233752617 -0.000005967671429]
 [ 0.000036781365613  0.000042606324015  0.000049630556338]
 [ 0.000006267830785 -0.000012114425725 -0.000026462669135]
 [ 0.000055984628491 -0.000008233752616  0.000005967671414]
 [-0.00003678136565  -0.000042606324019  0.000049630556273]
 [ 0.000030731202495  0.00002570051092   0.000056151104245]
 [-0.000014926915537 -0.000001173748792  0.000005567152412]
 [-0.000200327181494 -0.000027280454119 -0.000071478160386]]
""")

    assert(np.max(np.abs(I_00_ref-I_00)) < 1e-9)
    assert(np.max(np.abs(I_0D_ref-I_0D)) < 1e-9)
    assert(np.max(np.abs(I_D0_ref-I_D0)) < 1e-9)
    assert(np.max(np.abs(I_DD_ref-I_DD)) < 1e-9)

def test_AAT_MP2_H2DIMER_NORM():
    psi4.core.clean_options()
    psi4.set_memory('2 GB')
    psi4.set_output_file('output.dat', False)
    psi4.set_options({'scf_type': 'pk',
                      'e_convergence': 1e-13,
                      'd_convergence': 1e-13,
                      'r_convergence': 1e-13})

    psi4.set_options({'basis': 'STO-6G'})
    mol = psi4.geometry(moldict["(H2)_2"])
    rhf_e, rhf_wfn = psi4.energy('SCF', return_wfn=True)
    print(f"  SCF Energy from Psi4: {rhf_e}")

    AAT = magpy.AAT(mol, 0, 1)

    r_disp = 0.0001
    b_disp = 0.0001
    e_conv = 1e-12
    r_conv = 1e-12
    I_00, I_0D, I_D0, I_DD = AAT.compute('MP2', r_disp, b_disp, e_conv=e_conv, r_conv=r_conv, normalization='full', orbitals='spin')

    print("\nElectronic Contribution to Atomic Axial Tensor (a.u.):")
    print("Hartree-Fock component:")
    print(I_00)
    print("<0|D> Component\n")
    print(I_0D)
    print("<D|0> Component\n")
    print(I_D0)
    print("<0|D>+<D|0>\n")
    print(I_0D+I_D0)
    print("<D|D> Component\n")
    print(I_DD)

    I_00_ref = make_np_array("""
[[-0.096723351209542 -0.024181272567337  0.068430139633259]
 [ 0.024400268544308  0.005811811083407 -0.003775024693896]
 [-0.206841614528591 -0.051203482175313  0.092847829571277]
 [-0.087682713200192 -0.022005600143784  0.059580490691179]
 [-0.016265639555647 -0.004009823394636  0.020057124284182]
 [-0.212647898832485 -0.052555507197514  0.0879981297717  ]
 [-0.087682713199527 -0.02200560014358  -0.059580490702964]
 [-0.016265639551993 -0.004009823393998 -0.020057124286539]
 [ 0.212647898836765  0.052555507199013  0.08799812980157 ]
 [-0.096723351207417 -0.024181272566701 -0.068430139623468]
 [ 0.024400268537211  0.005811811081728  0.003775024688202]
 [ 0.20684161454356   0.051203482178527  0.092847829569462]]
 """)

    I_0D_ref = make_np_array("""
[[ 0.006729870104006  0.001675764842194 -0.00507069323964 ]
 [-0.00086185863402  -0.000212912387205 -0.000113861456708]
 [ 0.012919646614871  0.003214061019678 -0.007987390965541]
 [ 0.006345853459196  0.001580639671826 -0.004752827896607]
 [ 0.000967502144255  0.000240579116844 -0.000539944723077]
 [ 0.013035012801346  0.003242202768093 -0.007874026397769]
 [ 0.006345853459276  0.001580639671852  0.0047528278975  ]
 [ 0.000967502144228  0.000240579116836  0.000539944723251]
 [-0.013035012802086 -0.003242202768265 -0.007874026400257]
 [ 0.00672987010381   0.001675764842137  0.005070693238964]
 [-0.000861858633606 -0.00021291238711   0.000113861457013]
 [-0.012919646615334 -0.003214061019798 -0.007987390965297]]
 """)

    I_D0_ref = make_np_array("""
[[-0.006729870188878 -0.001675764850045  0.005070693251153]
 [ 0.000861858649153  0.000212912388447  0.000113861455094]
 [-0.012919646762202 -0.003214061032185  0.007987391008178]
 [-0.006345853538684 -0.001580639681566  0.004752827907833]
 [-0.000967502163092 -0.000240579121028  0.000539944724897]
 [-0.013035012946344 -0.003242202781022  0.007874026439226]
 [-0.0063458535393   -0.001580639681717 -0.004752827908534]
 [-0.000967502163373 -0.0002405791211   -0.000539944724958]
 [ 0.013035012947344  0.003242202781271  0.007874026442599]
 [-0.006729870188457 -0.001675764849938 -0.00507069325007 ]
 [ 0.000861858648742  0.000212912388345 -0.000113861455068]
 [ 0.012919646762394  0.003214061032235  0.007987391007864]]
 """)

    I_DD_ref = make_np_array("""
[[ 0.000030375220127  0.000025402802805 -0.000055133013936]
 [-0.00001475400599  -0.000001160152391 -0.000005441973281]
 [ 0.000198006642877  0.000026964444336 -0.000069951395408]
 [ 0.000006195225783 -0.000011974095349  0.000025758136673]
 [ 0.000055336116935 -0.000008138374942 -0.000005862536181]
 [ 0.000036355299667  0.000042112783295  0.000048356868486]
 [ 0.000006195225812 -0.00001197409534  -0.000025758136694]
 [ 0.000055336116953 -0.000008138374942  0.000005862536168]
 [-0.000036355299703 -0.000042112783299  0.000048356868426]
 [ 0.000030375220117  0.000025402802802  0.000055133013897]
 [-0.00001475400599  -0.000001160152389  0.000005441973273]
 [-0.000198006642867 -0.000026964444337 -0.000069951395412]]
 """)

    assert(np.max(np.abs(I_00_ref-I_00)) < 1e-9)
    assert(np.max(np.abs(I_0D_ref-I_0D)) < 1e-9)
    assert(np.max(np.abs(I_D0_ref-I_D0)) < 1e-9)
    assert(np.max(np.abs(I_DD_ref-I_DD)) < 1e-9)

@pytest.mark.skip(reason="too long")
def test_AAT_MP2_H2O():
    psi4.core.clean_options()
    psi4.set_memory('2 GB')
    psi4.set_output_file('output.dat', False)
    psi4.set_options({'scf_type': 'pk',
                      'e_convergence': 1e-12,
                      'd_convergence': 1e-12,
                      'r_convergence': 1e-12})

    psi4.set_options({'basis': 'STO-6G'})
    mol = psi4.geometry(moldict["H2O"])
    rhf_e, rhf_wfn = psi4.energy('SCF', return_wfn=True)
    print(f"  SCF Energy from Psi4: {rhf_e}")

    AAT = magpy.AAT(mol, 0, 1)

    r_disp = 0.0001
    b_disp = 0.0001
    e_conv = 1e-12
    r_conv = 1e-12
    I_00, I_0D, I_D0, I_DD = AAT.compute('MP2', r_disp, b_disp, e_conv=e_conv, r_conv=r_conv, normalization='intermediate', orbitals='spin')
    print("\nElectronic Contribution to Atomic Axial Tensor (a.u.):")
    print("Hartree-Fock component:")
    print(I_00)
    print("<0|D> Component\n")
    print(I_0D)
    print("<D|0> Component\n")
    print(I_D0)
    print("<0|D>+<D|0>\n")
    print(I_0D+I_D0)
    print("<D|D> Component\n")
    print(I_DD)

    I_00_ref = make_np_array("""
[[ 0.000000000000616  0.000000000000287 -0.226306484070603]
 [-0.00000000000106   0.000000000001418 -0.000000000000701]
 [ 0.329611190273558 -0.000000000008636 -0.               ]
 [ 0.000000000001701 -0.000000000000488  0.059895496704722]
 [ 0.000000000003119 -0.000000000001631 -0.136503781610507]
 [-0.22920256947181   0.215872630801219 -0.000000000001269]
 [ 0.000000000001022 -0.000000000000307  0.059895496713399]
 [-0.000000000000805 -0.000000000000283  0.13650378161377 ]
 [-0.229202569422332 -0.215872630802995 -0.000000000000086]]
 """)

    I_0D_ref = make_np_array("""
[[-0.000000000000012 -0.000000000000004  0.007752185486091]
 [ 0.000000000000048 -0.000000000000018  0.000000000000034]
 [-0.006567805640426  0.000000000000111 -0.               ]
 [-0.000000000000015  0.000000000000006 -0.001777052652572]
 [-0.000000000000043  0.000000000000021  0.004249315131551]
 [ 0.00456707150672  -0.002765917049802  0.000000000000004]
 [-0.000000000000039  0.000000000000004 -0.001777052652783]
 [ 0.000000000000035  0.000000000000004 -0.004249315131717]
 [ 0.00456707150575   0.002765917049824 -0.000000000000004]]
 """)

    I_D0_ref = make_np_array("""
[[ 0.                 0.000000000000014 -0.007752185395921]
 [-0.000000000000009  0.000000000000022 -0.000000000000111]
 [ 0.006567805571905 -0.000000000000104  0.               ]
 [ 0.000000000000044 -0.000000000000021  0.001777052707634]
 [ 0.00000000000003  -0.00000000000001  -0.004249315203962]
 [-0.004567071925647  0.002765917367179 -0.000000000000003]
 [-0.                 0.000000000000001  0.001777052707838]
 [-0.                -0.000000000000009  0.004249315204185]
 [-0.004567071924729 -0.002765917367189  0.000000000000003]]
 """)

    I_DD_ref = make_np_array("""
[[ 0.000000000000005  0.000000000000023 -0.003154681384107]
 [-0.000000000000028  0.000000000000035 -0.000000000000023]
 [ 0.014272447944466 -0.000000000000266  0.               ]
 [ 0.000000000000056 -0.000000000000033  0.00047360361053 ]
 [ 0.000000000000028 -0.000000000000028 -0.003196493501563]
 [-0.008371749311847  0.006594071483831 -0.000000000000015]
 [ 0.000000000000015  0.000000000000009  0.00047360361069 ]
 [-0.000000000000025 -0.00000000000001   0.00319649350168 ]
 [-0.008371749310689 -0.006594071483827 -0.000000000000001]]
 """)

    assert(np.max(np.abs(I_00_ref-I_00)) < 1e-9)
    assert(np.max(np.abs(I_0D_ref-I_0D)) < 1e-9)
    assert(np.max(np.abs(I_D0_ref-I_D0)) < 1e-9)
    assert(np.max(np.abs(I_DD_ref-I_DD)) < 1e-9)

@pytest.mark.skip(reason="too long")
def test_AAT_MP2_H2O_NORM():
    psi4.core.clean_options()
    psi4.set_memory('2 GB')
    psi4.set_output_file('output.dat', False)
    psi4.set_options({'scf_type': 'pk',
                      'e_convergence': 1e-12,
                      'd_convergence': 1e-12,
                      'r_convergence': 1e-12})

    psi4.set_options({'basis': 'STO-6G'})
    mol = psi4.geometry(moldict["H2O"])
    rhf_e, rhf_wfn = psi4.energy('SCF', return_wfn=True)
    print(f"  SCF Energy from Psi4: {rhf_e}")

    AAT = magpy.AAT(mol, 0, 1)

    r_disp = 0.0001
    b_disp = 0.0001
    e_conv = 1e-12
    r_conv = 1e-12
    I_00, I_0D, I_D0, I_DD = AAT.compute('MP2', r_disp, b_disp, e_conv=e_conv, r_conv=r_conv, normalization='full', orbitals='spin')

    print("\nElectronic Contribution to Atomic Axial Tensor (a.u.):")
    print("Hartree-Fock component:")
    print(I_00)
    print("<0|D> Component\n")
    print(I_0D)
    print("<D|0> Component\n")
    print(I_D0)
    print("<0|D>+<D|0>\n")
    print(I_0D+I_D0)
    print("<D|D> Component\n")
    print(I_DD)

    return 

    I_00_ref = make_np_array("""
[[ 0.000000000000602  0.000000000000281 -0.221387317520385]
 [-0.000000000001037  0.000000000001387 -0.000000000000686]
 [ 0.322446515534284 -0.000000000008449 -0.               ]
 [ 0.000000000001664 -0.000000000000478  0.058593563514857]
 [ 0.000000000003051 -0.000000000001595 -0.133536633598566]
 [-0.224220451431493  0.211180262270626 -0.000000000001242]
 [ 0.000000000001    -0.0000000000003    0.058593563523345]
 [-0.000000000000787 -0.000000000000277  0.133536633601758]
 [-0.22422045138309  -0.211180262272363 -0.000000000000084]]
 """)

    I_0D_ref = make_np_array("""
[[-0.000000000000012 -0.000000000000004  0.007583678199652]
 [ 0.000000000000047 -0.000000000000018  0.000000000000033]
 [-0.006425042917093  0.000000000000108 -0.               ]
 [-0.000000000000015  0.000000000000006 -0.001738425310682]
 [-0.000000000000042  0.00000000000002   0.004156948848244]
 [ 0.004467798233312 -0.002705795013606  0.000000000000004]
 [-0.000000000000039  0.000000000000004 -0.001738425310888]
 [ 0.000000000000034  0.000000000000004 -0.004156948848406]
 [ 0.004467798232362  0.002705795013628 -0.000000000000004]]
 """)

    I_D0_ref = make_np_array("""
[[ 0.                 0.000000000000014 -0.007583678111442]
 [-0.000000000000009  0.000000000000021 -0.000000000000108]
 [ 0.006425042850061 -0.000000000000102  0.               ]
 [ 0.000000000000043 -0.000000000000021  0.001738425364569]
 [ 0.000000000000029 -0.000000000000009 -0.004156948918822]
 [-0.004467798643133  0.002705795324085 -0.000000000000003]
 [-0.                 0.000000000000001  0.001738425364769]
 [-0.                -0.000000000000008  0.00415694891904 ]
 [-0.004467798642235 -0.002705795324094  0.000000000000003]]
 """)

    I_DD_ref = make_np_array("""
[[ 0.000000000000005  0.000000000000023 -0.00308610887632 ]
 [-0.000000000000028  0.000000000000035 -0.000000000000022]
 [ 0.01396221136794  -0.00000000000026   0.               ]
 [ 0.000000000000055 -0.000000000000033  0.000463309009253]
 [ 0.000000000000027 -0.000000000000027 -0.003127012134571]
 [-0.008189774723291  0.006450737827293 -0.000000000000014]
 [ 0.000000000000015  0.000000000000009  0.000463309009409]
 [-0.000000000000024 -0.00000000000001   0.003127012134685]
 [-0.008189774722158 -0.006450737827289 -0.000000000000001]]
 """)

    assert(np.max(np.abs(I_00_ref-I_00)) < 1e-9)
    assert(np.max(np.abs(I_0D_ref-I_0D)) < 1e-9)
    assert(np.max(np.abs(I_D0_ref-I_D0)) < 1e-9)
    assert(np.max(np.abs(I_DD_ref-I_DD)) < 1e-9)

