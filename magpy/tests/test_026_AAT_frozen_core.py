import psi4
import magpy
import pytest
from ..data.molecules import *
import numpy as np
import os
from ..utils import make_np_array

np.set_printoptions(precision=15, linewidth=200, threshold=200, suppress=True)

def test_AAT_MP2_H2O():
    psi4.core.clean_options()
    psi4.set_memory('2 GB')
    psi4.set_output_file('output.dat', False)
    psi4.set_options({'scf_type': 'pk',
                      'e_convergence': 1e-12,
                      'd_convergence': 1e-12,
                      'r_convergence': 1e-12})

    psi4.set_options({'basis': 'STO-6G'})
    psi4.set_options({'freeze_core': 'true'})
    mol = psi4.geometry(moldict["H2O"])
    rhf_e, rhf_wfn = psi4.energy('SCF', return_wfn=True)
    print(f"  SCF Energy from Psi4: {rhf_e}")

    AAT = magpy.AAT(mol, 0, 1)
    I_00, I_0D, I_D0, I_DD = AAT.compute('MP2', print_level=1, parallel=True, num_proc=os.cpu_count())
    print("\nElectronic Contribution to Atomic Axial Tensor (a.u.):")
    print("Hartree-Fock component:")
    print(I_00)
    print("<0|D> Component\n")
    print(I_0D)
    print("<D|0> Component\n")
    print(I_D0)
    print("<0|D>+<D|0>\n")
    print(I_0D+I_D0)
    print("<D|D> Component\n")
    print(I_DD)

    return

    I_00_ref = make_np_array("""[[-0.000000000000885 -0.000000000000133 -0.221388055285698]
 [-0.000000000001037  0.000000000001387  0.000000000000555]
 [ 0.322447592891834 -0.000000000008758  0.000000000000014]
 [ 0.000000000000298 -0.00000000000149   0.058593758263478]
 [ 0.000000000003303 -0.00000000000104  -0.133537080585562]
 [-0.224221200569403  0.211180967869124 -0.000000000000488]
 [ 0.000000000000989  0.000000000001123  0.058593758265735]
 [-0.000000000001327 -0.000000000000625  0.133537080582084]
 [-0.224221200546015 -0.211180967865547  0.000000000000476]]""")

    I_0D_ref = make_np_array("""[[ 0.000000000000018  0.000000000000002  0.006933445607431]
 [ 0.000000000000046 -0.000000000000018  0.000000000000036]
 [-0.006425064384323  0.000000000000112 -0.               ]
 [ 0.000000000000013  0.000000000000019 -0.001737179355382]
 [-0.000000000000047  0.000000000000013  0.004157552320948]
 [ 0.004467813160596 -0.002705804054262 -0.000000000000001]
 [-0.000000000000038 -0.000000000000014 -0.001737179355417]
 [ 0.000000000000045  0.000000000000008 -0.004157552320787]
 [ 0.004467813160123  0.0027058040542    0.000000000000001]]""")

    I_D0_ref = make_np_array("""[[-0.000000000000023 -0.000000000000066 -0.006933445527731]
 [-0.000000000000015  0.000000000000016  0.000000000000018]
 [ 0.006425064333186 -0.000000000000106  0.               ]
 [ 0.000000000000041  0.000000000000015  0.001737179409087]
 [ 0.000000000000071  0.00000000000004  -0.004157552391643]
 [-0.004467813570512  0.002705804364734 -0.000000000000007]
 [-0.000000000000024  0.000000000000067  0.001737179409158]
 [-0.000000000000026 -0.000000000000048  0.00415755239134 ]
 [-0.004467813569996 -0.002705804364666  0.000000000000007]]""")

    I_DD_ref = make_np_array("""[[ 0.000000000000033 -0.00000000000002  -0.003120426021844]
 [-0.000000000000028  0.000000000000035 -0.000000000000007]
 [ 0.013918781838518 -0.000000000000272  0.               ]
 [-0.000000000000013 -0.000000000000053  0.000463223383833]
 [ 0.000000000000033 -0.000000000000008 -0.003126854667737]
 [-0.008189297494473  0.006450493269525  0.000000000000003]
 [-0.000000000000056  0.000000000000071  0.000463223383812]
 [-0.000000000000012 -0.00000000000002   0.003126854667669]
 [-0.008189297493953 -0.006450493269404 -0.000000000000003]]""")

    assert(np.max(np.abs(I_00_ref-I_00)) < 1e-9)
    assert(np.max(np.abs(I_0D_ref-I_0D)) < 1e-9)
    assert(np.max(np.abs(I_D0_ref-I_D0)) < 1e-9)
    assert(np.max(np.abs(I_DD_ref-I_DD)) < 1e-9)


def test_AAT_CID_H2O():
    psi4.core.clean_options()
    psi4.set_memory('2 GB')
    psi4.set_output_file('output.dat', False)
    psi4.set_options({'scf_type': 'pk',
                      'e_convergence': 1e-12,
                      'd_convergence': 1e-12,
                      'r_convergence': 1e-12})

    psi4.set_options({'basis': 'STO-6G'})
    psi4.set_options({'freeze_core': 'true'})
    mol = psi4.geometry(moldict["H2O"])
    rhf_e, rhf_wfn = psi4.energy('SCF', return_wfn=True)
    print(f"  SCF Energy from Psi4: {rhf_e}")

    AAT = magpy.AAT(mol, 0, 1)
    I_00, I_0D, I_D0, I_DD = AAT.compute('CID', print_level=1, parallel=True, num_proc=os.cpu_count())
    print("\nElectronic Contribution to Atomic Axial Tensor (a.u.):")
    print("Hartree-Fock component:")
    print(I_00)
    print("<0|D> Component\n")
    print(I_0D)
    print("<D|0> Component\n")
    print(I_D0)
    print("<0|D>+<D|0>\n")
    print(I_0D+I_D0)
    print("<D|D> Component\n")
    print(I_DD)

    return

    I_00_ref = make_np_array("""[[-0.000000000000486  0.000000000000447 -0.216366014490783]
 [ 0.000000000000019  0.000000000002072 -0.00000000000022 ]
 [ 0.315133083694057 -0.000000000002113  0.000000000000002]
 [-0.000000000000875 -0.000000000000368  0.057264597838688]
 [ 0.000000000000442  0.000000000000336 -0.130507880751446]
 [-0.219134891743996  0.206390468078174  0.000000000000432]
 [ 0.000000000000656  0.000000000001483  0.057264597837576]
 [ 0.000000000001038  0.000000000002647  0.130507880755796]
 [-0.219134891744244 -0.206390468079676  0.000000000000862]]""")

    I_0D_ref = make_np_array("""[[ 0.000000000000013 -0.000000000000005  0.008711373869945]
 [-0.00000000000006  -0.000000000000025 -0.00000000000017 ]
 [-0.008224150533609  0.000000000000026 -0.               ]
 [-0.000000000000022  0.000000000000005  0.001145949219423]
 [-0.000000000000057 -0.000000000000004  0.004016041318899]
 [ 0.005718848172043 -0.002534518326921  0.000000000000001]
 [ 0.000000000000028 -0.000000000000018  0.001145949219144]
 [-0.000000000000073 -0.000000000000033 -0.004016041319115]
 [ 0.005718848172073  0.002534518326939 -0.000000000000001]]""")

    I_D0_ref = make_np_array("""[[-0.000000000000014 -0.000000000000006 -0.008711373626771]
 [-0.000000000000033  0.000000000000022  0.000000000000277]
 [ 0.008224150538123 -0.000000000000026  0.               ]
 [-0.000000000000002  0.000000000000002 -0.001145949266934]
 [ 0.000000000000027  0.000000000000028 -0.004016041310366]
 [-0.005718848825055  0.002534518850454 -0.000000000000007]
 [-0.000000000000066  0.000000000000034 -0.001145949266656]
 [ 0.000000000000031  0.00000000000002   0.004016041310445]
 [-0.00571884882504  -0.00253451885044   0.000000000000007]]""")

    I_DD_ref = make_np_array("""[[-0.000000000000091  0.000000000000059 -0.006327708867126]
 [-0.000000000000235  0.000000000000106  0.000000000000051]
 [ 0.034474948018519 -0.000000000000324  0.               ]
 [-0.000000000000025 -0.000000000000038  0.001213214500929]
 [ 0.000000000000087  0.000000000000011 -0.009561061743968]
 [-0.01973521312909   0.016026438329381  0.000000000000008]
 [-0.000000000000076  0.000000000000105  0.001213214501037]
 [ 0.00000000000001   0.000000000000229  0.009561061744214]
 [-0.019735213129104 -0.01602643832944   0.000000000000022]]""")

    assert(np.max(np.abs(I_00_ref-I_00)) < 1e-9)
    assert(np.max(np.abs(I_0D_ref-I_0D)) < 1e-9)
    assert(np.max(np.abs(I_D0_ref-I_D0)) < 1e-9)
    assert(np.max(np.abs(I_DD_ref-I_DD)) < 1e-9)


